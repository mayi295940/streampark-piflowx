package com.cscd.webservice;

import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;

import java.io.Serializable;
import java.net.MalformedURLException;
import java.net.URL;

/**
 * This class was generated by Apache CXF 3.1.12 2017-09-14T15:48:20.179+08:00 Generated source
 * version: 3.1.12
 */
@WebServiceClient(
    name = "CscdService",
    wsdlLocation = "http://sciencechina.cn/services/CscdService?wsdl",
    targetNamespace = "http://webservice.cscd.com")
public class CscdService extends Service implements Serializable {

  public static final URL WSDL_LOCATION;

  public static final QName SERVICE = new QName("http://webservice.cscd.com", "CscdService");
  public static final QName CscdServiceHttpSoap11Endpoint =
      new QName("http://webservice.cscd.com", "CscdServiceHttpSoap11Endpoint");
  public static final QName CscdServiceHttpSoap12Endpoint =
      new QName("http://webservice.cscd.com", "CscdServiceHttpSoap12Endpoint");
  public static final QName CscdServiceHttpEndpoint =
      new QName("http://webservice.cscd.com", "CscdServiceHttpEndpoint");

  static {
    URL url = null;
    try {
      url = new URL("http://sciencechina.cn/services/CscdService?wsdl");
    } catch (MalformedURLException e) {
      java.util.logging.Logger.getLogger(CscdService.class.getName())
          .log(
              java.util.logging.Level.INFO,
              "Can not initialize the default wsdl from {0}",
              "http://sciencechina.cn/services/CscdService?wsdl");
    }
    WSDL_LOCATION = url;
  }

  public CscdService(URL wsdlLocation) {
    super(wsdlLocation, SERVICE);
  }

  public CscdService(URL wsdlLocation, QName serviceName) {
    super(wsdlLocation, serviceName);
  }

  public CscdService() {
    super(WSDL_LOCATION, SERVICE);
  }

  public CscdService(WebServiceFeature... features) {
    super(WSDL_LOCATION, SERVICE, features);
  }

  public CscdService(URL wsdlLocation, WebServiceFeature... features) {
    super(wsdlLocation, SERVICE, features);
  }

  public CscdService(URL wsdlLocation, QName serviceName, WebServiceFeature... features) {
    super(wsdlLocation, serviceName, features);
  }

  /** @return returns CscdServicePortType */
  @WebEndpoint(name = "CscdServiceHttpSoap11Endpoint")
  public CscdServicePortType getCscdServiceHttpSoap11Endpoint() {
    return super.getPort(CscdServiceHttpSoap11Endpoint, CscdServicePortType.class);
  }

  /**
   * @param features A list of {@link WebServiceFeature} to configure on the proxy. Supported
   *     features not in the <code>features</code> parameter will have their default values.
   * @return returns CscdServicePortType
   */
  @WebEndpoint(name = "CscdServiceHttpSoap11Endpoint")
  public CscdServicePortType getCscdServiceHttpSoap11Endpoint(WebServiceFeature... features) {
    return super.getPort(CscdServiceHttpSoap11Endpoint, CscdServicePortType.class, features);
  }

  /** @return returns CscdServicePortType */
  @WebEndpoint(name = "CscdServiceHttpSoap12Endpoint")
  public CscdServicePortType getCscdServiceHttpSoap12Endpoint() {
    return super.getPort(CscdServiceHttpSoap12Endpoint, CscdServicePortType.class);
  }

  /**
   * @param features A list of {@link WebServiceFeature} to configure on the proxy. Supported
   *     features not in the <code>features</code> parameter will have their default values.
   * @return returns CscdServicePortType
   */
  @WebEndpoint(name = "CscdServiceHttpSoap12Endpoint")
  public CscdServicePortType getCscdServiceHttpSoap12Endpoint(WebServiceFeature... features) {
    return super.getPort(CscdServiceHttpSoap12Endpoint, CscdServicePortType.class, features);
  }

  /** @return returns CscdServicePortType */
  @WebEndpoint(name = "CscdServiceHttpEndpoint")
  public CscdServicePortType getCscdServiceHttpEndpoint() {
    return super.getPort(CscdServiceHttpEndpoint, CscdServicePortType.class);
  }

  /**
   * @param features A list of {@link WebServiceFeature} to configure on the proxy. Supported
   *     features not in the <code>features</code> parameter will have their default values.
   * @return returns CscdServicePortType
   */
  @WebEndpoint(name = "CscdServiceHttpEndpoint")
  public CscdServicePortType getCscdServiceHttpEndpoint(WebServiceFeature... features) {
    return super.getPort(CscdServiceHttpEndpoint, CscdServicePortType.class, features);
  }
}
