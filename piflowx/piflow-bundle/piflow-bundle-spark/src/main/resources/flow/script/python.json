{
  "flow":{
    "name":"pythonTest",
    "uuid":"1234567890",
    "stops":[
      {
        "uuid":"1111",
        "name":"CsvParser",
        "bundle":"cn.piflow.bundle.csv.CsvParser",
        "properties":{
          "csvPath":"hdfs://10.0.88.13:9000/xjzhu/test.csv",
          "header":"false",
          "delimiter":",",
          "schema":"title,author"
        }
      },
      {
        "uuid":"2222",
        "name":"PythonExecutor",
        "bundle":"cn.piflow.bundle.script.ExecutePython",
        "properties":{
            "script":"import sys\nimport os\n\nimport numpy as np\nfrom scipy import linalg\nimport pandas as pd\n\nimport matplotlib\nmatplotlib.use('Agg')\nimport matplotlib.pyplot as plt\n\nimport seaborn as sns\n\nimport timeit\nimport numpy.random as np_random\nfrom numpy.linalg import inv, qr\nfrom random import normalvariate\n\nimport pylab\n\nif __name__ == \"__main__\":\n    print(\"Hello PiFlow\")\n    try:\n        print(\"\\n mock dataï¼š\")\n        nsteps = 1000\n        draws = np.random.randint(0,2,size=nsteps)\n        print(\"\\n \" + str(draws))\n        steps = np.where(draws > 0, 1, -1)\n        walk = steps.cumsum()\n        print(\"Draw picture\")\n        plt.title('Random Walk')\n        limit = max(abs(min(walk)), abs(max(walk)))\n        plt.axis([0, nsteps, -limit, limit])\n        x = np.linspace(0,nsteps, nsteps)\n        plt.plot(x, walk, 'g-')\n        plt.savefig('/opt/python.png')\n    except Exception as e:\n        print(e)"
        }
      }
    ],
    "paths":[
      {
        "from":"CsvParser",
        "outport":"",
        "inport":"",
        "to":"ExecutePython"
      }
    ]
  }
}