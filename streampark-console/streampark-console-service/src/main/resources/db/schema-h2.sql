/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the `License`); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an `AS IS` BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

-- ----------------------------
-- Table structure for t_app_backup
-- ----------------------------
create table if not exists `t_app_backup` (
  `id` bigint generated by default as identity not null,
  `app_id` bigint default null,
  `sql_id` bigint default null,
  `config_id` bigint default null,
  `version` int default null,
  `path` varchar(128)  default null,
  `description` varchar(255) default null,
  `create_time` datetime not null default current_timestamp comment 'create time',
  `modify_time` datetime not null default current_timestamp on update current_timestamp comment 'modify time',
  primary key(`id`)
);

-- ----------------------------
-- Table structure for t_flink_app
-- ----------------------------
create table if not exists `t_flink_app` (
  `id` bigint generated by default as identity not null,
  `team_id` bigint not null,
  `job_type` tinyint default null,
  `execution_mode` tinyint default null,
  `resource_from` tinyint default null,
  `project_id` bigint default null,
  `job_name` varchar(255)  default null,
  `module` varchar(255)  default null,
  `jar` varchar(255)  default null,
  `jar_check_sum` bigint default null,
  `main_class` varchar(255)  default null,
  `args` text,
  `options` text,
  `hot_params` text ,
  `user_id` bigint default null,
  `app_id` varchar(64)  default null,
  `app_type` tinyint default null,
  `duration` bigint default null,
  `job_id` varchar(64)  default null,
  `job_manager_url` varchar(255)  default null,
  `version_id` bigint default null,
  `cluster_id` varchar(45)  default null,
  `k8s_name` varchar(63)  default null,
  `k8s_namespace` varchar(63)  default null,
  `flink_image` varchar(128)  default null,
  `state` int default null,
  `restart_size` int default null,
  `restart_count` int default null,
  `cp_threshold` int default null,
  `cp_max_failure_interval` int default null,
  `cp_failure_rate_interval` int default null,
  `cp_failure_action` tinyint default null,
  `dynamic_properties` text ,
  `description` varchar(255)  default null,
  `resolve_order` tinyint default null,
  `k8s_rest_exposed_type` tinyint default null,
  `jm_memory` int default null,
  `tm_memory` int default null,
  `total_task` int default null,
  `total_tm` int default null,
  `total_slot` int default null,
  `available_slot` int default null,
  `option_state` tinyint default null,
  `tracking` tinyint default null,
  `create_time` datetime not null default current_timestamp comment 'create time',
  `modify_time` datetime not null default current_timestamp comment 'modify time',
  `option_time` datetime default null,
  `release` tinyint default 1,
  `build` tinyint default 1,
  `start_time` datetime default null,
  `end_time` datetime default null,
  `alert_id` bigint default null,
  `k8s_pod_template` text ,
  `k8s_jm_pod_template` text ,
  `k8s_tm_pod_template` text ,
  `k8s_hadoop_integration` tinyint default 0,
  `flink_cluster_id` bigint default null,
  `ingress_template` text ,
  `default_mode_ingress` text ,
  `tags` varchar(500) default null,
  `probing` tinyint default 0,
  primary key(`id`)
);

-- ----------------------------
-- Table structure for t_flink_config
-- ----------------------------
create table if not exists `t_flink_config` (
  `id` bigint generated by default as identity not null,
  `app_id` bigint not null,
  `format` tinyint not null default 0,
  `version` int not null,
  `latest` tinyint not null default 0,
  `content` text  not null,
  `create_time` datetime not null default current_timestamp comment 'create time',
  primary key(`id`)
);

-- ----------------------------
-- Table structure for t_flink_effective
-- ----------------------------
create table if not exists `t_flink_effective` (
  `id` bigint generated by default as identity not null,
  `app_id` bigint not null,
  `target_type` tinyint not null comment '1) config 2) flink sql',
  `target_id` bigint not null comment 'configId or sqlId',
  `create_time` datetime not null default current_timestamp comment 'create time',
  primary key(`id`),
  unique (`app_id`,`target_type`)
);

-- ----------------------------
-- Table structure for t_flink_env
-- ----------------------------
create table if not exists `t_flink_env` (
  `id` bigint generated by default as identity not null,
  `flink_name` varchar(128)  not null comment 'flink instance name',
  `flink_home` varchar(255)  not null comment 'flink home path',
  `version` varchar(64)  not null comment 'flink version',
  `scala_version` varchar(64)  not null comment 'scala version of flink',
  `flink_conf` text  not null comment 'flink-conf',
  `is_default` tinyint not null default 0 comment 'whether default version or not',
  `description` varchar(255)  default null comment 'description',
  `create_time` datetime not null default current_timestamp comment 'create time',
  primary key(`id`),
  unique (`flink_name`)
);

-- ----------------------------
-- Table structure for t_flink_log
-- ----------------------------
create table if not exists `t_flink_log` (
  `id` bigint generated by default as identity not null,
  `app_id` bigint default null,
  `yarn_app_id` varchar(64)  default null,
  `job_manager_url` varchar(255)  default null,
  `success` tinyint default null,
  `exception` text ,
  `option_time` datetime default null,
  `option_name` tinyint default null,
  `user_id` bigint default null comment 'operator user id',
  primary key(`id`)
);


-- ----------------------------
-- Table structure for t_flink_project
-- ----------------------------
create table if not exists `t_flink_project` (
  `id` bigint generated by default as identity not null,
  `team_id` bigint not null,
  `name` varchar(255)  default null,
  `git_credential` tinyint not null,
  `url` varchar(255)  default null,
  `branches` varchar(64)  default null,
  `user_name` varchar(64)  default null,
  `password` varchar(64)  default null,
  `prvkey_path` varchar(128)  default null,
  `pom` varchar(255)  default null,
  `build_args` varchar(255) default null,
  `type` tinyint default null,
  `repository` tinyint default null,
  `last_build` datetime default null,
  `description` varchar(255)  default null,
  `build_state` tinyint default -1,
  `create_time` datetime not null default current_timestamp comment 'create time',
  `modify_time` datetime not null default current_timestamp on update current_timestamp comment 'modify time',
  primary key(`id`)
);


-- ----------------------------
-- Table structure for t_flink_savepoint
-- ----------------------------
create table if not exists `t_flink_savepoint` (
  `id` bigint generated by default as identity not null,
  `app_id` bigint not null,
  `chk_id` bigint default null,
  `type` tinyint default null,
  `path` varchar(255)  default null,
  `latest` tinyint not null default 1,
  `trigger_time` datetime default null,
  `create_time` datetime not null default current_timestamp comment 'create time',
  primary key(`id`)
);

-- ----------------------------
-- Table structure for t_flink_sql
-- ----------------------------
create table if not exists `t_flink_sql` (
  `id` bigint generated by default as identity not null,
  `app_id` bigint default null,
  `sql` text ,
  `team_resource` varchar(64) default null,
  `dependency` text ,
  `version` int default null,
  `candidate` tinyint not null default 1,
  `create_time` datetime not null default current_timestamp comment 'create time',
  primary key(`id`)
);

-- ----------------------------
-- Table of t_resource
-- ----------------------------
create table if not exists `t_resource` (
  `id` bigint generated by default as identity not null,
  `resource_name` varchar(128) not null comment 'The name of the resource file',
  `resource_type` int not null comment '0:app 1:common 2:connector 3:format 4:udf',
  `resource_path` varchar(255) default null,
  `resource` text ,
  `engine_type` int not null comment 'compute engine type, 0:apache flink 1:apache spark',
  `main_class` varchar(255) default null,
  `description` text default null comment 'More detailed description of resource',
  `creator_id` bigint not null comment 'user id of creator',
  `connector_required_options` text default null,
  `connector_optional_options` text default null,
  `team_id` bigint not null comment 'team id',
  `create_time` datetime not null default current_timestamp comment 'create time',
  `modify_time` datetime not null default current_timestamp on update current_timestamp comment 'modify time',
  primary key (`id`)
);

-- ----------------------------
-- Table structure for t_menu
-- ----------------------------
create table if not exists `t_menu` (
  `menu_id` bigint generated by default as identity not null comment  'menu button id',
  `parent_id` bigint not null comment  'parent menu id',
  `menu_name` varchar(64)  not null comment 'menu button name',
  `path` varchar(64)  default null comment 'routing path',
  `component` varchar(64)  default null comment 'routing component component',
  `perms` varchar(64)  default null comment 'authority id',
  `icon` varchar(64)  default null comment 'icon',
  `type` char(2)  default null comment 'type 0:menu 1:button',
  `display` tinyint not null default 0 comment 'whether the menu is displayed',
  `order_num` int default null comment 'sort',
  `create_time` datetime not null default current_timestamp comment 'create time',
  `modify_time` datetime not null default current_timestamp on update current_timestamp comment 'modify time',
  primary key(`menu_id`)
);

-- ----------------------------
-- Table structure for t_message
-- ----------------------------
create table if not exists `t_message` (
  `id` bigint generated by default as identity not null,
  `app_id` bigint default null,
  `user_id` bigint default null,
  `type` tinyint default null,
  `title` varchar(255)  default null,
  `context` text ,
  `is_read` tinyint default 0,
  `create_time` datetime not null default current_timestamp comment 'create time',
  primary key(`id`)
);

-- ----------------------------
-- Table of t_team
-- ----------------------------
create table if not exists `t_team` (
  `id` bigint generated by default as identity not null comment 'team id',
  `team_name` varchar(64) not null comment 'team name',
  `description` varchar(255) default null,
  `create_time` datetime not null default current_timestamp comment 'create time',
  `modify_time` datetime not null default current_timestamp on update current_timestamp comment 'modify time',
  primary key (`id`),
  unique (`team_name`)
);

-- ----------------------------
-- Table of t_variable
-- ----------------------------
create table if not exists `t_variable` (
  `id` bigint generated by default as identity not null comment 'variable id',
  `variable_code` varchar(128) not null comment 'Variable code is used for parameter names passed to the program or as placeholders',
  `variable_value` text not null comment 'The specific value corresponding to the variable',
  `description` text default null comment 'More detailed description of variables, only for display, not involved in program logic',
  `creator_id` bigint not null comment 'user id of creator',
  `team_id` bigint not null comment 'team id',
  `desensitization` tinyint not null default 0 comment '0 is no desensitization, 1 is desensitization, if set to desensitization, it will be replaced by * when displayed',
  `create_time` datetime not null default current_timestamp comment 'create time',
  `modify_time` datetime not null default current_timestamp on update current_timestamp comment 'modify time',
  primary key (`id`),
  unique (`team_id`, `variable_code`)
);

-- ----------------------------
-- Table structure for t_role
-- ----------------------------
create table if not exists `t_role` (
  `role_id` bigint generated by default as identity not null comment 'user id',
  `role_name` varchar(64)  not null comment 'user name',
  `create_time` datetime not null default current_timestamp comment 'create time',
  `modify_time` datetime not null default current_timestamp on update current_timestamp comment 'modify time',
  `description` varchar(255)  default null comment 'description',
  primary key(`role_id`)
);

-- ----------------------------
-- Table structure for t_role_menu
-- ----------------------------
create table if not exists `t_role_menu` (
  `id` bigint generated by default as identity not null,
  `role_id` bigint not null,
  `menu_id` bigint not null,
  primary key(`id`),
  unique (`role_id`,`menu_id`)
);

-- ----------------------------
-- Table structure for t_setting
-- ----------------------------
create table if not exists `t_setting` (
  `order_num` int default null,
  `setting_key` varchar(64) primary key not null,
  `setting_value` text  default null,
  `setting_name` varchar(255)  default null,
  `description` varchar(255)  default null,
  `type` tinyint not null comment '1: input 2: boolean 3: number'
);

-- ----------------------------
-- Table structure for t_user
-- ----------------------------
create table if not exists `t_user` (
  `user_id` bigint generated by default as identity not null comment 'user id',
  `username` varchar(64)  not null comment 'user name',
  `nick_name` varchar(64)  not null comment 'nick name',
  `salt` varchar(26)  default null comment 'salt',
  `password` varchar(64)  default null comment 'password',
  `email` varchar(64)  default null comment 'email',
  `user_type` int  not null comment 'user type 1:admin 2:user',
  `login_type` tinyint default 0 comment 'login type 0:password 1:ldap 2:sso',
  `last_team_id` bigint default null comment 'last team id',
  `status` char(1)  not null comment 'status 0:locked 1:active',
  `create_time` datetime not null default current_timestamp comment 'create time',
  `modify_time` datetime not null default current_timestamp on update current_timestamp comment 'modify time',
  `last_login_time` datetime default null comment 'last login time',
  `sex` char(1)  default null comment 'gender 0:male 1:female 2:confidential',
  `avatar` varchar(128)  default null comment 'avatar',
  `description` varchar(255)  default null comment 'description',
  primary key(`user_id`),
  unique (`username`)
);

-- ----------------------------
-- Table structure for t_member
-- ----------------------------
create table if not exists `t_member` (
  `id` bigint generated by default as identity not null,
  `team_id` bigint not null comment 'team id',
  `user_id` bigint not null comment 'user id',
  `role_id` bigint not null comment 'role id',
  `create_time` datetime not null default current_timestamp comment 'create time',
  `modify_time` datetime not null default current_timestamp on update current_timestamp comment 'modify time',
  primary key(`id`),
  unique (`team_id`, `user_id`,`role_id`)
);

-- ----------------------------
-- Table of t_app_build_pipe
-- ----------------------------
create table if not exists `t_app_build_pipe` (
  `app_id` bigint generated by default as identity not null,
  `pipe_type` tinyint,
  `pipe_status` tinyint,
  `cur_step` smallint,
  `total_step` smallint,
  `steps_status` text,
  `steps_status_ts` text,
  `error` text,
  `build_result` text,
  `modify_time` datetime not null default current_timestamp on update current_timestamp comment 'modify time',
  primary key(`app_id`)
);

-- ----------------------------
-- Table of t_flink_cluster
-- ----------------------------
create table if not exists `t_flink_cluster` (
  `id` bigint  generated by default as identity not null,
  `address` varchar(150) default null comment 'url address of cluster',
  `job_manager_url` varchar(150) default null comment 'url address of jobmanager',
  `cluster_id` varchar(45) default null comment 'clusterId of session mode(yarn-session:application-id,k8s-session:cluster-id)',
  `cluster_name` varchar(128) not null comment 'cluster name',
  `options` text comment 'json form of parameter collection ',
  `yarn_queue` varchar(128) default null comment 'the yarn queue where the task is located',
  `execution_mode` tinyint not null default 1 comment 'k8s execution session mode(1:remote,3:yarn-session,5:kubernetes-session)',
  `version_id` bigint not null comment 'flink version id',
  `k8s_namespace` varchar(63) default 'default' comment 'k8s namespace',
  `service_account` varchar(64) default null comment 'k8s service account',
  `description` varchar(255) default null,
  `user_id` bigint default null,
  `flink_image` varchar(128) default null comment 'flink image',
  `dynamic_properties` text comment 'allows specifying multiple generic configuration options',
  `k8s_rest_exposed_type` tinyint default 2 comment 'k8s export(0:loadbalancer,1:clusterip,2:nodeport)',
  `k8s_hadoop_integration` tinyint default 0,
  `k8s_conf` varchar(255) default null comment 'the path where the k 8 s configuration file is located',
  `resolve_order` tinyint default null,
  `exception` text comment 'exception information',
  `cluster_state` tinyint default 0 comment 'cluster status (0: created but not started, 1: started, 2: stopped)',
  `create_time` datetime not null default current_timestamp comment 'create time',
  `start_time` datetime default null comment 'start time',
  `end_time` datetime default null comment 'end time',
  `alert_id` bigint default null comment 'alert id',
  primary key(`id`,`cluster_name`),
  unique (`cluster_id`,`address`,`execution_mode`)
);

-- ----------------------------
-- Table of t_alert_config
-- ----------------------------
create table if not exists `t_alert_config` (
  `id` bigint generated by default as identity not null,
  `user_id` bigint default null,
  `alert_name` varchar(128)  default null comment 'alert group name',
  `alert_type` int default 0 comment 'alert type',
  `email_params` varchar(255)  comment 'email params',
  `sms_params` text  comment 'sms params',
  `ding_talk_params` text  comment 'ding talk params',
  `we_com_params` varchar(255)  comment 'wechat params',
  `http_callback_params` text  comment 'http callback params',
  `lark_params` text  comment 'lark params',
  `create_time` datetime not null default current_timestamp comment 'create time',
  `modify_time` datetime not null default current_timestamp on update current_timestamp comment 'change time',
  primary key(`id`)
);


-- ----------------------------
-- Table of t_access_token definition
-- ----------------------------
create table if not exists `t_access_token` (
  `id` int generated by default as identity not null comment 'key',
  `user_id` bigint,
  `token` varchar(1024) default null comment 'token',
  `expire_time` datetime default null comment 'expiration',
  `description` varchar(255) default null comment 'description',
  `status` tinyint default null comment '1:enable,0:disable',
  `create_time` datetime not null default current_timestamp comment 'create time',
  `modify_time` datetime not null default current_timestamp on update current_timestamp comment 'modify time',
  primary key(`id`)
);


-- ----------------------------
-- Table of t_external_link definition
-- ----------------------------
create table if not exists `t_external_link` (
  `id` int generated by default as identity not null comment 'key',
  `badge_label` varchar(64)  default null,
  `badge_name` varchar(64)  default null,
  `badge_color` varchar(64)  default null,
  `link_url` varchar(255)  default null,
  `create_time` datetime not null default current_timestamp comment 'create time',
  `modify_time` datetime not null default current_timestamp on update current_timestamp comment 'modify time',
  primary key(`id`)
);


-- ----------------------------
-- table structure for t_yarn_queue
-- ----------------------------
drop table if exists `t_yarn_queue`;
create table if not exists `t_yarn_queue` (
  `id` bigint generated by default as identity not null comment 'queue id',
  `team_id` bigint not null comment 'team id',
  `queue_label` varchar(128) not null comment 'queue label expression',
  `description` varchar(255) default null comment 'description of the queue label',
  `create_time` datetime not null default current_timestamp comment 'create time',
  `modify_time` datetime not null default current_timestamp on update current_timestamp comment 'modify time',
  unique key (`team_id`,`queue_label`),
  primary key (`id`)
);

-- ----------------------------
-- flow sql start
-- ----------------------------
CREATE TABLE IF NOT EXISTS FLOW (
	`ID` VARCHAR(40) PRIMARY KEY NOT NULL,
	ENGINE_TYPE VARCHAR(10) NOT NULL,
	CRT_DTTM TIMESTAMP NOT NULL,
	CRT_USER VARCHAR(255) NOT NULL,
	ENABLE_FLAG BOOLEAN NOT NULL,
	LAST_UPDATE_DTTM TIMESTAMP NOT NULL,
	LAST_UPDATE_USER VARCHAR(255) NOT NULL,
	VERSION BIGINT,
	DESCRIPTION CLOB,
	DRIVER_MEMORY VARCHAR(255),
	EXECUTOR_CORES VARCHAR(255),
	EXECUTOR_MEMORY VARCHAR(255),
	EXECUTOR_NUMBER VARCHAR(255),
	IS_EXAMPLE BOOLEAN,
	NAME VARCHAR(255),
	UUID VARCHAR(255),
	PAGE_ID VARCHAR(255),
	FK_FLOW_GROUP_ID VARCHAR(40)
);

CREATE TABLE IF NOT EXISTS `FLOW_PATH`(
    `ID` VARCHAR(40) PRIMARY KEY NOT NULL,
    `CRT_DTTM` DATETIME NOT NULL COMMENT 'Create date time',
    `CRT_USER` VARCHAR(255) NOT NULL COMMENT 'Create user',
    `ENABLE_FLAG` BIT NOT NULL COMMENT 'Enable flag',
    `LAST_UPDATE_DTTM` DATETIME NOT NULL COMMENT 'Last update date time',
    `LAST_UPDATE_USER` VARCHAR(255) NOT NULL COMMENT 'Last update user',
    `VERSION` BIGINT COMMENT 'Version',
    `LINE_FROM` VARCHAR(255) COMMENT 'Line from',
    `LINE_INPORT` VARCHAR(255) COMMENT 'Line in port',
    `LINE_OUTPORT` VARCHAR(255) COMMENT 'Line out port',
    `PAGE_ID` VARCHAR(255) COMMENT 'Page id',
    `LINE_TO` VARCHAR(255) COMMENT 'Line to',
    `FK_FLOW_ID` VARCHAR(40) COMMENT 'Foreign key flow id'
);

CREATE TABLE IF NOT EXISTS `FLOW_PROCESS` (
    `ID` VARCHAR(40) PRIMARY KEY NOT NULL,
    `CRT_DTTM` DATETIME NOT NULL COMMENT 'Create date time',
    `CRT_USER` VARCHAR(255) NOT NULL COMMENT 'Create user',
    `ENABLE_FLAG` BIT NOT NULL COMMENT 'Enable flag',
    `LAST_UPDATE_DTTM` DATETIME NOT NULL COMMENT 'Last update date time',
    `LAST_UPDATE_USER` VARCHAR(255) NOT NULL COMMENT 'Last update user',
    `VERSION` BIGINT COMMENT 'Version',
    `APP_ID` VARCHAR(255) COMMENT 'The id returned when calling runProcess',
    `DESCRIPTION` VARCHAR(1024) COMMENT 'Description',
    `DRIVER_MEMORY` VARCHAR(255) COMMENT 'Driver memory',
    `END_TIME` DATETIME COMMENT 'End time of the process',
    `EXECUTOR_CORES` VARCHAR(255) COMMENT 'Executor_cores',
    `EXECUTOR_MEMORY` VARCHAR(255) COMMENT 'Executor memory',
    `EXECUTOR_NUMBER` VARCHAR(255) COMMENT 'Executor number',
    `FLOW_ID` VARCHAR(255) COMMENT 'Flow id',
    `NAME` VARCHAR(255) COMMENT 'Process name',
    `ENGINE_TYPE` VARCHAR(10) COMMENT 'engine type',
    `PARENT_PROCESS_ID` VARCHAR(255) COMMENT 'Third parentProcessId',
    `PROCESS_ID` VARCHAR(255) COMMENT 'Third processId',
    `PROGRESS` VARCHAR(255) COMMENT 'Process progress',
    `START_TIME` DATETIME COMMENT 'Process startup time',
    `STATE` VARCHAR(255) COMMENT 'Process status',
    `VIEW_XML` TEXT COMMENT 'Process view xml string'
);

CREATE TABLE IF NOT EXISTS `FLOW_PROCESS_PATH`(
    `ID` VARCHAR(40) PRIMARY KEY NOT NULL,
    `CRT_DTTM` DATETIME NOT NULL COMMENT 'Create date time',
    `CRT_USER` VARCHAR(255) NOT NULL COMMENT 'Create user',
    `ENABLE_FLAG` BIT NOT NULL COMMENT 'Enable flag',
    `LAST_UPDATE_DTTM` DATETIME NOT NULL COMMENT 'Last update date time',
    `LAST_UPDATE_USER` VARCHAR(255) NOT NULL COMMENT 'Last update user',
    `VERSION` BIGINT COMMENT 'Version',
    `LINE_FROM` VARCHAR(255) COMMENT 'Line from',
    `LINE_INPORT` VARCHAR(255) COMMENT 'Line in port',
    `LINE_OUTPORT` VARCHAR(255) COMMENT 'Line out port',
    `PAGE_ID` VARCHAR(255) COMMENT 'Page id',
    `LINE_TO` VARCHAR(255) COMMENT 'Line to',
    `FK_FLOW_PROCESS_ID` VARCHAR(40) COMMENT 'Foreign key flow process id'
);

CREATE TABLE IF NOT EXISTS `FLOW_PROCESS_STOP`(
    `ID` VARCHAR(40) PRIMARY KEY NOT NULL,
    `CRT_DTTM` DATETIME NOT NULL COMMENT 'Create date time',
    `CRT_USER` VARCHAR(255) NOT NULL COMMENT 'Create user',
    `ENABLE_FLAG` BIT NOT NULL COMMENT 'Enable flag',
    `LAST_UPDATE_DTTM` DATETIME NOT NULL COMMENT 'Last update date time',
    `LAST_UPDATE_USER` VARCHAR(255) NOT NULL COMMENT 'Last update user',
    `VERSION` BIGINT COMMENT 'Version',
    `BUNDLE` VARCHAR(255) COMMENT 'Bundle',
    `DESCRIPTION` VARCHAR(255) COMMENT 'Description',
    `END_TIME` DATETIME COMMENT 'End time',
    `GROUPS` VARCHAR(255) COMMENT 'Groups',
    `IN_PORT_TYPE` VARCHAR(255) COMMENT 'In port type',
    `INPORTS` VARCHAR(255) COMMENT 'In ports',
    `NAME` VARCHAR(255) COMMENT 'Name',
    `OUT_PORT_TYPE` VARCHAR(255) COMMENT 'Out port type',
    `OUTPORTS` VARCHAR(255) COMMENT 'Out ports',
    `OWNER` VARCHAR(255) COMMENT 'Owner',
    `PAGE_ID` VARCHAR(255) COMMENT 'Page id',
    `START_TIME` DATETIME COMMENT 'Start time',
    `STATE` VARCHAR(255) COMMENT 'ProcessStop status',
    `FK_FLOW_PROCESS_ID` VARCHAR(40) COMMENT 'Foreign key flow process id'
);

CREATE TABLE IF NOT EXISTS `FLOW_PROCESS_STOP_PROPERTY`(
    `ID` VARCHAR(40) PRIMARY KEY NOT NULL,
    `CRT_DTTM` DATETIME NOT NULL COMMENT 'Create date time',
    `CRT_USER` VARCHAR(255) NOT NULL COMMENT 'Create user',
    `ENABLE_FLAG` BIT NOT NULL COMMENT 'Enable flag',
    `LAST_UPDATE_DTTM` DATETIME NOT NULL COMMENT 'Last update date time',
    `LAST_UPDATE_USER` VARCHAR(255) NOT NULL COMMENT 'Last update user',
    `VERSION` BIGINT COMMENT 'Version',
    `ALLOWABLE_VALUES` VARCHAR(255) COMMENT 'Allowable values',
    `CUSTOM_VALUE` VARCHAR(255) COMMENT 'Custom value',
    `DESCRIPTION` VARCHAR(1024) COMMENT 'Description',
    `DISPLAY_NAME` VARCHAR(255) COMMENT 'Display name',
    `NAME` VARCHAR(255) COMMENT 'Description',
    `PROPERTY_REQUIRED` BIT COMMENT 'Property required',
    `PROPERTY_SENSITIVE` BIT COMMENT 'Property sensitive',
    `FK_FLOW_PROCESS_STOP_ID` VARCHAR(40) COMMENT 'Foreign key flowProcessStop id'
);

CREATE TABLE IF NOT EXISTS `FLOW_STOPS_GROUPS`(
    `ID` VARCHAR(40) PRIMARY KEY NOT NULL,
    `CRT_DTTM` DATETIME NOT NULL COMMENT 'Create date time',
    `CRT_USER` VARCHAR(255) NOT NULL COMMENT 'Create user',
    `ENABLE_FLAG` BIT NOT NULL COMMENT 'Enable flag',
    `LAST_UPDATE_DTTM` DATETIME NOT NULL COMMENT 'Last update date time',
    `LAST_UPDATE_USER` VARCHAR(255) NOT NULL COMMENT 'Last update user',
    `VERSION` BIGINT COMMENT 'Version',
    `GROUP_NAME` VARCHAR(255) COMMENT 'Group name',
    `ENGINE_TYPE` VARCHAR(10) NOT NULL
);

CREATE TABLE IF NOT EXISTS `FLOW_STOPS`(
    `ID` VARCHAR(40) PRIMARY KEY NOT NULL,
    `CRT_DTTM` DATETIME NOT NULL COMMENT 'Create date time',
    `CRT_USER` VARCHAR(255) NOT NULL COMMENT 'Create user',
    `ENABLE_FLAG` BIT NOT NULL COMMENT 'Enable flag',
    `LAST_UPDATE_DTTM` DATETIME NOT NULL COMMENT 'Last update date time',
    `LAST_UPDATE_USER` VARCHAR(255) NOT NULL COMMENT 'Last update user',
    `VERSION` BIGINT COMMENT 'Version',
    `BUNDLE` VARCHAR(255) COMMENT 'Bundle',
    `ENGINE_TYPE` VARCHAR(10) NOT NULL,
    `DESCRIPTION` TEXT COMMENT 'Description',
    `GROUPS` VARCHAR(255) COMMENT 'Groups',
    `IN_PORT_TYPE` VARCHAR(255) COMMENT 'In port type',
    `INPORTS` VARCHAR(255) COMMENT 'In ports',
    `IS_CHECKPOINT` BIT COMMENT 'Is checkpoint',
    `NAME` VARCHAR(255) COMMENT 'name',
    `OUT_PORT_TYPE` VARCHAR(255) COMMENT 'Out port type',
    `OUTPORTS` VARCHAR(255) COMMENT 'Out ports',
    `OWNER` VARCHAR(255) COMMENT 'Owner',
    `PAGE_ID` VARCHAR(255) COMMENT 'Page id',
    `START_TIME` DATETIME COMMENT 'Start time',
    `STATE` VARCHAR(255) COMMENT 'FlowStop state',
    `STOP_TIME` DATETIME COMMENT 'Stop time',
    `FK_FLOW_ID` VARCHAR(40) COMMENT 'Foreign key flow id'
);

CREATE TABLE IF NOT EXISTS `FLOW_STOPS_PROPERTY`(
    `ID` VARCHAR(40) PRIMARY KEY NOT NULL,
    `CRT_DTTM` DATETIME NOT NULL COMMENT 'Create date time',
    `CRT_USER` VARCHAR(255) NOT NULL COMMENT 'Create user',
    `ENABLE_FLAG` BIT NOT NULL COMMENT 'Enable flag',
    `LAST_UPDATE_DTTM` DATETIME NOT NULL COMMENT 'Last update date time',
    `LAST_UPDATE_USER` VARCHAR(255) NOT NULL COMMENT 'Last update user',
    `VERSION` BIGINT COMMENT 'Version',
    `ALLOWABLE_VALUES` VARCHAR(255) COMMENT 'Allowable values',
    `CUSTOM_VALUE` TEXT COMMENT 'Custom value',
    `DESCRIPTION` TEXT COMMENT 'Description',
    `DISPLAY_NAME` VARCHAR(255) COMMENT 'Display name',
    `IS_SELECT` BIT COMMENT 'Is select',
    `NAME` VARCHAR(255) COMMENT 'name',
    `PROPERTY_REQUIRED` BIT COMMENT 'Property required',
    `PROPERTY_SENSITIVE` BIT COMMENT 'Property sensitive',
    `FK_STOPS_ID` VARCHAR(40) COMMENT 'Foreign key stops id'
);

CREATE TABLE IF NOT EXISTS `FLOW_STOPS_TEMPLATE`(
    `ID` VARCHAR(40) PRIMARY KEY NOT NULL,
    `CRT_DTTM` DATETIME NOT NULL COMMENT 'Create date time',
    `CRT_USER` VARCHAR(255) NOT NULL COMMENT 'Create user',
    `ENABLE_FLAG` BIT NOT NULL COMMENT 'Enable flag',
    `LAST_UPDATE_DTTM` DATETIME NOT NULL COMMENT 'Last update date time',
    `LAST_UPDATE_USER` VARCHAR(255) NOT NULL COMMENT 'Last update user',
    `VERSION` BIGINT COMMENT 'Version',
    `BUNDLE` VARCHAR(255) COMMENT 'Bundle',
    `ENGINE_TYPE` VARCHAR(10) NOT NULL,
    `DESCRIPTION` TEXT COMMENT 'description',
    `GROUPS` VARCHAR(255) COMMENT 'Groups',
    `IN_PORT_TYPE` VARCHAR(255) COMMENT 'In port type',
    `INPORTS` VARCHAR(255) COMMENT 'In ports',
    `NAME` VARCHAR(255) COMMENT 'name',
    `OUT_PORT_TYPE` VARCHAR(255) COMMENT 'Out port type',
    `OUTPORTS` VARCHAR(255) COMMENT 'Out ports',
    `OWNER` VARCHAR(255) COMMENT 'Owner',
    `STOP_GROUP` VARCHAR(255) COMMENT 'stopGroup'
);

CREATE TABLE IF NOT EXISTS `FLOW_STOPS_PROPERTY_TEMPLATE`(
    `ID` VARCHAR(40) PRIMARY KEY NOT NULL,
    `CRT_DTTM` DATETIME NOT NULL COMMENT 'Create date time',
    `CRT_USER` VARCHAR(255) NOT NULL COMMENT 'Create user',
    `ENABLE_FLAG` BIT NOT NULL COMMENT 'Enable flag',
    `LAST_UPDATE_DTTM` DATETIME NOT NULL COMMENT 'Last update date time',
    `LAST_UPDATE_USER` VARCHAR(255) NOT NULL COMMENT 'Last update user',
    `VERSION` BIGINT COMMENT 'Version',
    `ALLOWABLE_VALUES` TEXT COMMENT 'Default value',
    `DEFAULT_VALUE` TEXT COMMENT 'Default value',
    `DESCRIPTION` TEXT COMMENT 'Description',
    `DISPLAY_NAME` TEXT COMMENT 'Display name',
    `NAME` VARCHAR(255) COMMENT 'Name',
    `PROPERTY_REQUIRED` BIT COMMENT 'Property required',
    `PROPERTY_SENSITIVE` BIT COMMENT 'Property sensitive',
    `FK_STOPS_ID` VARCHAR(255) COMMENT 'Foreign key stops id'
);

CREATE TABLE IF NOT EXISTS `FLOW_TEMPLATE`(
    `ID` VARCHAR(40) PRIMARY KEY NOT NULL,
    `CRT_DTTM` DATETIME NOT NULL COMMENT 'Create date time',
    `CRT_USER` VARCHAR(255) NOT NULL COMMENT 'Create user',
    `ENABLE_FLAG` BIT NOT NULL COMMENT 'Enable flag',
    `LAST_UPDATE_DTTM` DATETIME NOT NULL COMMENT 'Last update date time',
    `LAST_UPDATE_USER` VARCHAR(255) NOT NULL COMMENT 'Last update user',
    `VERSION` BIGINT COMMENT 'Version',
    `DESCRIPTION` VARCHAR(1024) COMMENT 'description',
    `NAME` VARCHAR(255) COMMENT 'Name',
    `PATH` VARCHAR(255) COMMENT 'Path',
    `VALUE` LONGTEXT COMMENT 'Value',
    `FK_FLOW_ID` VARCHAR(40) COMMENT 'Foreign key flow id'
);

CREATE TABLE IF NOT EXISTS `ASSOCIATION_GROUPS_STOPS_TEMPLATE`(
    `GROUPS_ID` VARCHAR(40) NOT NULL COMMENT 'Group primary key id',
    `ENGINE_TYPE` VARCHAR(10) NOT NULL,
    `STOPS_TEMPLATE_ID` VARCHAR(40) NOT NULL COMMENT 'stops_template primary key id'
);

CREATE TABLE IF NOT EXISTS `MX_GRAPH_MODEL`(
   `ID` VARCHAR(40) PRIMARY KEY NOT NULL,
	CRT_DTTM TIMESTAMP NOT NULL,
	CRT_USER VARCHAR(255) NOT NULL,
	ENABLE_FLAG BOOLEAN NOT NULL,
	LAST_UPDATE_DTTM TIMESTAMP NOT NULL,
	LAST_UPDATE_USER VARCHAR(255) NOT NULL,
	VERSION BIGINT,
	MX_ARROWS VARCHAR(255),
	MX_BACKGROUND VARCHAR(255),
	MX_CONNECT VARCHAR(255),
	MX_DX VARCHAR(255),
	MX_DY VARCHAR(255),
	MX_FOLD VARCHAR(255),
	MX_GRID VARCHAR(255),
	MX_GRIDSIZE VARCHAR(255),
	MX_GUIDES VARCHAR(255),
	MX_PAGE VARCHAR(255),
	MX_PAGEHEIGHT VARCHAR(255),
	MX_PAGESCALE VARCHAR(255),
	MX_PAGEWIDTH VARCHAR(255),
	MX_TOOLTIPS VARCHAR(255),
	FK_FLOW_ID VARCHAR(40),
	FK_FLOW_GROUP_ID VARCHAR(40),
	FK_PROCESS_ID VARCHAR(40),
	FK_PROCESS_GROUP_ID VARCHAR(40)
);

CREATE TABLE IF NOT EXISTS `MX_CELL`(
    `ID` VARCHAR(40) PRIMARY KEY NOT NULL,
    `CRT_DTTM` DATETIME NOT NULL COMMENT 'Create date time',
    `CRT_USER` VARCHAR(255) NOT NULL COMMENT 'Create user',
    `ENABLE_FLAG` BIT NOT NULL COMMENT 'Enable flag',
    `LAST_UPDATE_DTTM` DATETIME NOT NULL COMMENT 'Last update date time',
    `LAST_UPDATE_USER` VARCHAR(255) NOT NULL COMMENT 'Last update user',
    `VERSION` BIGINT COMMENT 'Version',
    `MX_EDGE` VARCHAR(255) COMMENT 'mx_edge',
    `MX_PAGEID` VARCHAR(255) COMMENT 'mx_pageid',
    `MX_PARENT` VARCHAR(255) COMMENT 'mx_parent',
    `MX_SOURCE` VARCHAR(255) COMMENT 'mx_source',
    `MX_STYLE` VARCHAR(255) COMMENT 'mx_style',
    `MX_TARGET` VARCHAR(255) COMMENT 'mx_target',
    `MX_VALUE` VARCHAR(255) COMMENT 'mx_value',
    `MX_VERTEX` VARCHAR(255) COMMENT 'mx_vertex',
    `FK_MX_GRAPH_ID` VARCHAR(40) COMMENT 'Foreign key fk_mx_graph_id'
);

CREATE TABLE IF NOT EXISTS `MX_GEOMETRY`(
    `ID` VARCHAR(40) PRIMARY KEY NOT NULL,
    `CRT_DTTM` DATETIME NOT NULL COMMENT 'Create date time',
    `CRT_USER` VARCHAR(255) NOT NULL COMMENT 'Create user',
    `ENABLE_FLAG` BIT NOT NULL COMMENT 'Enable flag',
    `LAST_UPDATE_DTTM` DATETIME NOT NULL COMMENT 'Last update date time',
    `LAST_UPDATE_USER` VARCHAR(255) NOT NULL COMMENT 'Last update user',
    `VERSION` BIGINT COMMENT 'Version',
    `MX_AS` VARCHAR(255) COMMENT 'mx_as',
    `MX_HEIGHT` VARCHAR(255) COMMENT 'mx_height',
    `MX_RELATIVE` VARCHAR(255) COMMENT 'mx_relative',
    `MX_WIDTH` VARCHAR(255) COMMENT 'mx_width',
    `MX_X` VARCHAR(255) COMMENT 'mx_x',
    `MX_Y` VARCHAR(255) COMMENT 'mx_y',
    `FK_MX_CELL_ID` VARCHAR(40) COMMENT 'Foreign key fk_mx_cell_id'
);

CREATE TABLE IF NOT EXISTS `STOPS_TEMPLATE`(
    `ID` VARCHAR(40) PRIMARY KEY NOT NULL,
    `BUNDLE` VARCHAR(255) COMMENT 'Bundle',
    `ENGINE_TYPE` VARCHAR(10) NOT NULL,
    `CRT_DTTM` DATETIME NOT NULL COMMENT 'Create date time',
    `CRT_USER` VARCHAR(255) COMMENT 'Create user',
    `DESCRIPTION` VARCHAR(255) COMMENT 'Description',
    `ENABLE_FLAG` BIT NOT NULL COMMENT 'Enable flag',
    `GROUPS` VARCHAR(255) COMMENT 'Groups',
    `IN_PORT_TYPE` VARCHAR(255) COMMENT 'In port type',
    `INPORTS` VARCHAR(255) COMMENT 'In ports',
    `IS_CHECKPOINT` BIT COMMENT 'Is checkpoint',
    `NAME` VARCHAR(255) COMMENT 'Name',
    `OUT_PORT_TYPE` VARCHAR(255) COMMENT 'Out port type',
    `OUTPORTS` VARCHAR(255) COMMENT 'Out ports',
    `OWNER` VARCHAR(255) COMMENT 'Owner',
    `PAGE_ID` VARCHAR(255) COMMENT 'Page id',
    `VERSION` BIGINT COMMENT 'Version',
    `FK_TEMPLATE_ID` VARCHAR(40) COMMENT 'Foreign key fk_template_id'
);

CREATE TABLE IF NOT EXISTS `PROPERTY_TEMPLATE`(
    `ID` VARCHAR(40) PRIMARY KEY NOT NULL,
    `ALLOWABLE_VALUES` VARCHAR(255) COMMENT 'Allowable values',
    `CRT_DTTM` DATETIME NOT NULL COMMENT 'Create date time',
    `CRT_USER` VARCHAR(255) COMMENT 'Create user',
    `CUSTOM_VALUE` VARCHAR(255) COMMENT 'Custom value',
    `DESCRIPTION` VARCHAR(1024) COMMENT 'Description',
    `DISPLAY_NAME` VARCHAR(255) COMMENT 'Display name',
    `ENABLE_FLAG` BIT NOT NULL COMMENT 'Enable flag',
    `IS_SELECT` BIT COMMENT 'Is select',
    `NAME` VARCHAR(255) COMMENT 'Name',
    `PROPERTY_REQUIRED` BIT COMMENT 'Property required',
    `PROPERTY_SENSITIVE` BIT COMMENT 'Property sensitive',
    `VERSION` BIGINT COMMENT 'Version',
    `FK_STOPS_ID` VARCHAR(40) COMMENT 'Foreign key stops id'
);

CREATE TABLE IF NOT EXISTS `SYS_USER`(
    `ID` VARCHAR(40) PRIMARY KEY NOT NULL,
    `CRT_DTTM` DATETIME NOT NULL COMMENT 'Create date time',
    `CRT_USER` VARCHAR(255) NOT NULL COMMENT 'Create user',
    `ENABLE_FLAG` BIT NOT NULL COMMENT 'Enable flag',
    `LAST_UPDATE_DTTM` DATETIME NOT NULL COMMENT 'Last update date time',
    `LAST_UPDATE_USER` VARCHAR(255) NOT NULL COMMENT 'Last update user',
    `VERSION` BIGINT COMMENT 'Version',
    `AGE` INTEGER COMMENT 'Age',
    `NAME` VARCHAR(255) COMMENT 'Name',
    `PASSWORD` VARCHAR(255) COMMENT 'Password',
    `SEX` VARCHAR(255) COMMENT 'Sex',
    `USERNAME` VARCHAR(255) COMMENT 'Username'
);
CREATE TABLE IF NOT EXISTS `SYS_ROLE`(
    `ID` INTEGER PRIMARY KEY NOT NULL,
    `ROLE` VARCHAR(255) COMMENT 'role',
    `FK_SYS_USER_ID` VARCHAR(40) COMMENT 'Foreign key fk_sys_user_id'
);

CREATE TABLE IF NOT EXISTS `STATISTICS` (
    `ID` VARCHAR(40) NOT NULL,
    `LOGIN_IP` VARCHAR(255) COMMENT 'login_ip',
    `LOGIN_TIME` DATETIME COMMENT 'login_time',
    `LOGIN_USER` VARCHAR(255) COMMENT 'login_user'
);

-- ----------------------------
-- Table structure for flow_group
-- ----------------------------
CREATE TABLE IF NOT EXISTS `FLOW_GROUP` (
    `ID` VARCHAR(40) PRIMARY KEY NOT NULL,
    `CRT_DTTM` DATETIME NOT NULL COMMENT 'Create date time',
    `CRT_USER` VARCHAR(255) NOT NULL COMMENT 'Create user',
    `ENABLE_FLAG` BIT NOT NULL COMMENT 'Enable flag',
    `LAST_UPDATE_DTTM` DATETIME NOT NULL COMMENT 'Last update date time',
    `LAST_UPDATE_USER` VARCHAR(255) NOT NULL COMMENT 'Last update user',
    `VERSION` BIGINT COMMENT 'Version',
    `DESCRIPTION` TEXT COMMENT 'description',
    `IS_EXAMPLE` BIT COMMENT 'isExample',
    `NAME` VARCHAR(255) COMMENT 'flow name',
    `UUID` VARCHAR(255) COMMENT 'flow uuid'
);

-- ----------------------------
-- Table structure for flow_group_path
-- ----------------------------
CREATE TABLE IF NOT EXISTS `FLOW_GROUP_PATH` (
    `ID` VARCHAR(40) PRIMARY KEY NOT NULL,
    `CRT_DTTM` DATETIME NOT NULL COMMENT 'Create date time',
    `CRT_USER` VARCHAR(255) NOT NULL COMMENT 'Create user',
    `ENABLE_FLAG` BIT NOT NULL COMMENT 'Enable flag',
    `LAST_UPDATE_DTTM` DATETIME NOT NULL COMMENT 'Last update date time',
    `LAST_UPDATE_USER` VARCHAR(255) NOT NULL COMMENT 'Last update user',
    `VERSION` BIGINT COMMENT 'Version',
    `FILTER_CONDITION` VARCHAR(255) COMMENT 'filter_condition',
    `LINE_FROM` VARCHAR(255) COMMENT 'line from',
    `LINE_INPORT` VARCHAR(255) COMMENT 'line in port',
    `LINE_OUTPORT` VARCHAR(255) COMMENT 'line out port',
    `PAGE_ID` VARCHAR(255) DEFAULT NULL COMMENT 'page_id',
    `LINE_TO` VARCHAR(255) COMMENT 'line to',
    `FK_FLOW_GROUP_ID` VARCHAR(40) COMMENT 'Foreign key fk_flow_group_id'
);

-- ----------------------------
-- Table structure for flow_process_group
-- ----------------------------
CREATE TABLE IF NOT EXISTS `FLOW_PROCESS_GROUP` (
    `ID` VARCHAR(40) PRIMARY KEY NOT NULL,
    `CRT_DTTM` DATETIME NOT NULL COMMENT 'Create date time',
    `CRT_USER` VARCHAR(255) NOT NULL COMMENT 'Create user',
    `ENABLE_FLAG` BIT NOT NULL COMMENT 'Enable flag',
    `LAST_UPDATE_DTTM` DATETIME NOT NULL COMMENT 'Last update date time',
    `LAST_UPDATE_USER` VARCHAR(255) NOT NULL COMMENT 'Last update user',
    `VERSION` BIGINT COMMENT 'Version',
    `APP_ID` VARCHAR(255) COMMENT 'The id returned when calling runProcess',
    `DESCRIPTION` VARCHAR(1024) COMMENT 'description',
    `END_TIME` DATETIME COMMENT 'End time of the process',
    `FLOW_ID` VARCHAR(255) COMMENT 'flowId',
    `NAME` VARCHAR(255) COMMENT 'Process name',
    `PARENT_PROCESS_Id` VARCHAR(255) COMMENT 'Third parentProcessId',
    `PROCESS_ID` VARCHAR(255) COMMENT 'Third processId',
    `PROGRESS` VARCHAR(255) COMMENT 'Process progress',
    `RUN_MODE_TYPE` VARCHAR(255) COMMENT 'Process RunModeType',
    `START_TIME` DATETIME COMMENT 'Process startup time',
    `STATE` VARCHAR(255) COMMENT 'Process status',
    `VIEW_XML` TEXT COMMENT 'Process view xml string',
    `PROCESS_PARENT_TYPE` VARCHAR(255) COMMENT 'Process parent type'
);

-- ----------------------------
-- Table structure for flow_process_group_path
-- ----------------------------
CREATE TABLE IF NOT EXISTS `FLOW_PROCESS_GROUP_PATH` (
    `ID` VARCHAR(40) PRIMARY KEY NOT NULL,
    `CRT_DTTM` DATETIME NOT NULL COMMENT 'Create date time',
    `CRT_USER` VARCHAR(255) NOT NULL COMMENT 'Create user',
    `ENABLE_FLAG` BIT NOT NULL COMMENT 'Enable flag',
    `LAST_UPDATE_DTTM` DATETIME NOT NULL COMMENT 'Last update date time',
    `LAST_UPDATE_USER` VARCHAR(255) NOT NULL COMMENT 'Last update user',
    `VERSION` BIGINT COMMENT 'Version',
    `LINE_FROM` VARCHAR(255) DEFAULT NULL COMMENT 'line_from',
    `LINE_INPORT` VARCHAR(255) DEFAULT NULL COMMENT 'line_inport',
    `LINE_OUTPORT` VARCHAR(255) DEFAULT NULL COMMENT 'line_outport',
    `PAGE_ID` VARCHAR(255) DEFAULT NULL COMMENT 'page_id',
    `LINE_TO` VARCHAR(255) DEFAULT NULL COMMENT 'line_to',
    `FK_FLOW_PROCESS_GROUP_ID` VARCHAR(40) DEFAULT NULL COMMENT 'Foreign key fk_flow_process_group_id'
);
-- ----------------------------
-- Table structure for flow_stops_customized_property
-- ----------------------------
CREATE TABLE IF NOT EXISTS `FLOW_STOPS_CUSTOMIZED_PROPERTY` (
    `ID` VARCHAR(40) PRIMARY KEY NOT NULL,
    `CRT_DTTM` DATETIME NOT NULL COMMENT 'Create date time',
    `CRT_USER` VARCHAR(255) NOT NULL COMMENT 'Create user',
    `ENABLE_FLAG` BIT NOT NULL COMMENT 'Enable flag',
    `LAST_UPDATE_DTTM` DATETIME NOT NULL COMMENT 'Last update date time',
    `LAST_UPDATE_USER` VARCHAR(255) NOT NULL COMMENT 'Last update user',
    `VERSION` BIGINT COMMENT 'Version',
    `CUSTOM_VALUE` TEXT COMMENT 'custom value',
    `description` TEXT COMMENT 'description',
    `name` VARCHAR(255) COMMENT 'name',
    `fk_stops_id` VARCHAR(40) DEFAULT NULL COMMENT 'Foreign key fk_stops_id'
);

-- ----------------------------
-- Table structure for process_stops_customized_property
-- ----------------------------
CREATE TABLE IF NOT EXISTS `PROCESS_STOPS_CUSTOMIZED_PROPERTY` (
    `ID` VARCHAR(40) PRIMARY KEY NOT NULL,
    `CRT_DTTM` DATETIME NOT NULL COMMENT 'Create date time',
    `CRT_USER` VARCHAR(255) NOT NULL COMMENT 'Create user',
    `ENABLE_FLAG` BIT NOT NULL COMMENT 'Enable flag',
    `LAST_UPDATE_DTTM` DATETIME NOT NULL COMMENT 'Last update date time',
    `LAST_UPDATE_USER` VARCHAR(255) NOT NULL COMMENT 'Last update user',
    `VERSION` BIGINT COMMENT 'Version',
    `CUSTOM_VALUE` TEXT COMMENT 'custom value',
    `DESCRIPTION` TEXT COMMENT 'description',
    `NAME` VARCHAR(255) COMMENT 'name',
    `FK_FLOW_PROCESS_STOP_ID` VARCHAR(40) DEFAULT NULL COMMENT 'Foreign key fk_flow_process_stop_id'
);
-- ----------------------------
-- Table structure for flow_group_template
-- ----------------------------
CREATE TABLE IF NOT EXISTS `FLOW_GROUP_TEMPLATE` (
    `ID` VARCHAR(40) PRIMARY KEY NOT NULL,
    `CRT_DTTM` DATETIME NOT NULL COMMENT 'Create date time',
    `CRT_USER` VARCHAR(255) NOT NULL COMMENT 'Create user',
    `ENABLE_FLAG` BIT NOT NULL COMMENT 'Enable flag',
    `LAST_UPDATE_DTTM` DATETIME NOT NULL COMMENT 'Last update date time',
    `LAST_UPDATE_USER` VARCHAR(255) NOT NULL COMMENT 'Last update user',
    `VERSION` BIGINT COMMENT 'Version',
    `DESCRIPTION` VARCHAR(1024) COMMENT 'description',
    `FLOW_GROUP_NAME` VARCHAR(255) DEFAULT NULL COMMENT 'flow_group_name',
    `NAME` VARCHAR(255) DEFAULT NULL COMMENT 'name',
    `PATH` VARCHAR(255) DEFAULT NULL COMMENT 'path'
);

CREATE TABLE IF NOT EXISTS `SYS_SCHEDULE` (
    `ID` VARCHAR(40) PRIMARY KEY NOT NULL,
    `CRT_DTTM` DATETIME NOT NULL COMMENT 'Create date time',
    `CRT_USER` VARCHAR(255) NOT NULL COMMENT 'Create user',
    `ENABLE_FLAG` BIT NOT NULL COMMENT 'Enable flag',
    `LAST_UPDATE_DTTM` DATETIME NOT NULL COMMENT 'Last update date time',
    `LAST_UPDATE_USER` VARCHAR(255) NOT NULL COMMENT 'Last update user',
    `VERSION` BIGINT COMMENT 'Version',
    `CRON_EXPRESSION` VARCHAR(255) COMMENT 'Cron expression',
    `JOB_CLASS` VARCHAR(255) COMMENT 'job class',
    `JOB_NAME` VARCHAR(255) COMMENT 'job name',
    `STATUS` VARCHAR(255) COMMENT 'task status'
);

-- ----------------------------
-- Table structure for data_source
-- ----------------------------
CREATE TABLE IF NOT EXISTS `DATA_SOURCE`  (
    `ID` VARCHAR(40) PRIMARY KEY NOT NULL,
    `CRT_DTTM` DATETIME NOT NULL COMMENT 'Create date time',
    `CRT_USER` VARCHAR(255) NOT NULL COMMENT 'Create user',
    `ENABLE_FLAG` BIT NOT NULL COMMENT 'Enable flag',
    `LAST_UPDATE_DTTM` DATETIME NOT NULL COMMENT 'Last update date time',
    `LAST_UPDATE_USER` VARCHAR(255) NOT NULL COMMENT 'Last update user',
    `VERSION` BIGINT COMMENT 'Version',
    `DATA_SOURCE_DESCRIPTION` TEXT NULL COMMENT 'dataSourceDescription',
    `DATA_SOURCE_NAME` VARCHAR(255) COMMENT 'dataSourceName',
    `DATA_SOURCE_TYPE` VARCHAR(255) COMMENT 'dataSourceType',
    `IS_TEMPLATE` BIT COMMENT 'isTemplate'
);

-- ----------------------------
-- Table structure for data_source_property
-- ----------------------------
CREATE TABLE IF NOT EXISTS `DATA_SOURCE_PROPERTY`  (
    `ID` VARCHAR(40) PRIMARY KEY NOT NULL,
    `CRT_DTTM` DATETIME NOT NULL COMMENT 'Create date time',
    `CRT_USER` VARCHAR(255) NOT NULL COMMENT 'Create user',
    `ENABLE_FLAG` BIT NOT NULL COMMENT 'Enable flag',
    `LAST_UPDATE_DTTM` DATETIME NOT NULL COMMENT 'Last update date time',
    `LAST_UPDATE_USER` VARCHAR(255) NOT NULL COMMENT 'Last update user',
    `VERSION` BIGINT COMMENT 'Version',
    `DESCRIPTION` TEXT NULL COMMENT 'description',
    `NAME` VARCHAR(255) COMMENT 'name',
    `VALUE` VARCHAR(255) COMMENT 'value',
    `FK_DATA_SOURCE_ID` VARCHAR(40) COMMENT 'Foreign key fk_data_source_id'
);

-- ----------------------------
-- Table structure for flow_group
-- ----------------------------
CREATE TABLE IF NOT EXISTS `FLOW_GROUP` (
    `ID` VARCHAR(40) PRIMARY KEY NOT NULL,
    `CRT_DTTM` DATETIME NOT NULL COMMENT 'Create date time',
    `CRT_USER` VARCHAR(255) NOT NULL COMMENT 'Create user',
    `ENABLE_FLAG` BIT NOT NULL COMMENT 'Enable flag',
    `LAST_UPDATE_DTTM` DATETIME NOT NULL COMMENT 'Last update date time',
    `LAST_UPDATE_USER` VARCHAR(255) NOT NULL COMMENT 'Last update user',
    `VERSION` BIGINT COMMENT 'Version',
    `DESCRIPTION` TEXT COMMENT 'description',
    `IS_EXAMPLE` BIT COMMENT 'isExample',
    `NAME` VARCHAR(255) COMMENT 'flow name',
    `UUID` VARCHAR(255) COMMENT 'flow uuid'
);

-- ----------------------------
-- Table structure for flow_process_group
-- ----------------------------
CREATE TABLE IF NOT EXISTS `FLOW_PROCESS_GROUP` (
    `ID` VARCHAR(40) PRIMARY KEY NOT NULL,
    `CRT_DTTM` DATETIME NOT NULL COMMENT 'Create date time',
    `CRT_USER` VARCHAR(255) NOT NULL COMMENT 'Create user',
    `ENABLE_FLAG` BIT NOT NULL COMMENT 'Enable flag',
    `LAST_UPDATE_DTTM` DATETIME NOT NULL COMMENT 'Last update date time',
    `LAST_UPDATE_USER` VARCHAR(255) NOT NULL COMMENT 'Last update user',
    `VERSION` BIGINT COMMENT 'Version',
    `APP_ID` VARCHAR(255) COMMENT 'The id returned when calling runProcess',
    `DESCRIPTION` VARCHAR(1024) COMMENT 'description',
    `END_TIME` DATETIME COMMENT 'End time of the process',
    `FLOW_ID` VARCHAR(255) COMMENT 'flowId',
    `NAME` VARCHAR(255) COMMENT 'Process name',
    `PARENT_PROCESS_Id` VARCHAR(255) COMMENT 'Third parentProcessId',
    `PROCESS_ID` VARCHAR(255) COMMENT 'Third processId',
    `PROGRESS` VARCHAR(255) COMMENT 'Process progress',
    `RUN_MODE_TYPE` VARCHAR(255) COMMENT 'Process RunModeType',
    `START_TIME` DATETIME COMMENT 'Process startup time',
    `STATE` VARCHAR(255) COMMENT 'Process status',
    `VIEW_XML` TEXT COMMENT 'Process view xml string',
    `PROCESS_PARENT_TYPE` VARCHAR(255) COMMENT 'Process parent type'
);


-- ----------------------------
-- Table structure for flow_stops_customized_property
-- ----------------------------
CREATE TABLE IF NOT EXISTS `FLOW_STOPS_CUSTOMIZED_PROPERTY` (
    `ID` VARCHAR(40) PRIMARY KEY NOT NULL,
    `CRT_DTTM` DATETIME NOT NULL COMMENT 'Create date time',
    `CRT_USER` VARCHAR(255) NOT NULL COMMENT 'Create user',
    `ENABLE_FLAG` BIT NOT NULL COMMENT 'Enable flag',
    `LAST_UPDATE_DTTM` DATETIME NOT NULL COMMENT 'Last update date time',
    `LAST_UPDATE_USER` VARCHAR(255) NOT NULL COMMENT 'Last update user',
    `VERSION` BIGINT COMMENT 'Version',
    `CUSTOM_VALUE` TEXT COMMENT 'custom value',
    `description` TEXT COMMENT 'description',
    `name` VARCHAR(255) COMMENT 'name',
    `fk_stops_id` VARCHAR(40) DEFAULT NULL COMMENT 'Foreign key fk_stops_id'
);

-- ----------------------------
-- Table structure for process_stops_customized_property
-- ----------------------------
CREATE TABLE IF NOT EXISTS `PROCESS_STOPS_CUSTOMIZED_PROPERTY` (
    `ID` VARCHAR(40) PRIMARY KEY NOT NULL,
    `CRT_DTTM` DATETIME NOT NULL COMMENT 'Create date time',
    `CRT_USER` VARCHAR(255) NOT NULL COMMENT 'Create user',
    `ENABLE_FLAG` BIT NOT NULL COMMENT 'Enable flag',
    `LAST_UPDATE_DTTM` DATETIME NOT NULL COMMENT 'Last update date time',
    `LAST_UPDATE_USER` VARCHAR(255) NOT NULL COMMENT 'Last update user',
    `VERSION` BIGINT COMMENT 'Version',
    `CUSTOM_VALUE` TEXT COMMENT 'custom value',
    `DESCRIPTION` TEXT COMMENT 'description',
    `NAME` VARCHAR(255) COMMENT 'name',
    `FK_FLOW_PROCESS_STOP_ID` VARCHAR(40) DEFAULT NULL COMMENT 'Foreign key fk_flow_process_stop_id'
);
-- ----------------------------
-- Table structure for flow_group_template
-- ----------------------------
CREATE TABLE IF NOT EXISTS `FLOW_GROUP_TEMPLATE` (
    `ID` VARCHAR(40) PRIMARY KEY NOT NULL,
    `CRT_DTTM` DATETIME NOT NULL COMMENT 'Create date time',
    `CRT_USER` VARCHAR(255) NOT NULL COMMENT 'Create user',
    `ENABLE_FLAG` BIT NOT NULL COMMENT 'Enable flag',
    `LAST_UPDATE_DTTM` DATETIME NOT NULL COMMENT 'Last update date time',
    `LAST_UPDATE_USER` VARCHAR(255) NOT NULL COMMENT 'Last update user',
    `VERSION` BIGINT COMMENT 'Version',
    `DESCRIPTION` VARCHAR(1024) COMMENT 'description',
    `FLOW_GROUP_NAME` VARCHAR(255) DEFAULT NULL COMMENT 'flow_group_name',
    `NAME` VARCHAR(255) DEFAULT NULL COMMENT 'name',
    `PATH` VARCHAR(255) DEFAULT NULL COMMENT 'path'
);

CREATE TABLE IF NOT EXISTS `SYS_SCHEDULE` (
    `ID` VARCHAR(40) PRIMARY KEY NOT NULL,
    `CRT_DTTM` DATETIME NOT NULL COMMENT 'Create date time',
    `CRT_USER` VARCHAR(255) NOT NULL COMMENT 'Create user',
    `ENABLE_FLAG` BIT NOT NULL COMMENT 'Enable flag',
    `LAST_UPDATE_DTTM` DATETIME NOT NULL COMMENT 'Last update date time',
    `LAST_UPDATE_USER` VARCHAR(255) NOT NULL COMMENT 'Last update user',
    `VERSION` BIGINT COMMENT 'Version',
    `CRON_EXPRESSION` VARCHAR(255) COMMENT 'Cron expression',
    `JOB_CLASS` VARCHAR(255) COMMENT 'job class',
    `JOB_NAME` VARCHAR(255) COMMENT 'job name',
    `STATUS` VARCHAR(255) COMMENT 'task status'
);

CREATE TABLE IF NOT EXISTS `SYS_INIT_RECORDS` (
   ID VARCHAR(40) PRIMARY KEY NOT NULL,
   INIT_DATE DATETIME NOT NULL,
   IS_SUCCEED BIT NOT NULL
);

CREATE TABLE IF NOT EXISTS mx_node_image (
   ID VARCHAR(40) PRIMARY KEY NOT NULL,
   CRT_DTTM DATETIME NOT NULL,
   CRT_USER VARCHAR(255) NOT NULL,
   ENABLE_FLAG BIT NOT NULL,
   LAST_UPDATE_DTTM DATETIME NOT NULL,
   LAST_UPDATE_USER VARCHAR(255) NOT NULL,
   VERSION BIGINT,
   IMAGE_NAME VARCHAR(255),
   IMAGE_PATH VARCHAR(255),
   IMAGE_TYPE VARCHAR(255),
   IMAGE_URL VARCHAR(255)
);


CREATE TABLE IF NOT EXISTS `GROUP_SCHEDULE` (
  `ID` VARCHAR(40) PRIMARY KEY NOT NULL,
  `CRT_DTTM` DATETIME NOT NULL COMMENT 'Create date time',
  `CRT_USER` VARCHAR(255) NOT NULL COMMENT 'Create user',
  `ENABLE_FLAG` BIT NOT NULL COMMENT 'Enable flag',
  `LAST_UPDATE_DTTM` DATETIME NOT NULL COMMENT 'Last update date time',
  `LAST_UPDATE_USER` VARCHAR(255) NOT NULL COMMENT 'Last update user',
  `VERSION` BIGINT COMMENT 'Version',
  `CRON_EXPRESSION` VARCHAR ( 255 ) COMMENT 'cron expression',
  `PLAN_END_TIME` DATETIME COMMENT 'plan end time',
  `PLAN_START_TIME` DATETIME COMMENT 'plan start time',
  `SCHEDULE_ID` VARCHAR ( 255 ) COMMENT 'service schedule id',
  `SCHEDULE_PROCESS_TEMPLATE_ID` VARCHAR ( 255 ) COMMENT 'Template ID for generating Process',
  `SCHEDULE_RUN_TEMPLATE_ID` VARCHAR ( 255 ) COMMENT 'Start template ID',
  `STATUS` VARCHAR ( 255 ) COMMENT 'schedule task status',
  `TYPE` VARCHAR ( 255 ) COMMENT 'schedule content Flow or FlowGroup'
);

CREATE TABLE IF NOT EXISTS `STOPS_HUB` (
  `ID` VARCHAR(40) PRIMARY KEY NOT NULL,
  `CRT_DTTM` DATETIME NOT NULL COMMENT 'Create date time',
  `CRT_USER` VARCHAR(255) NOT NULL COMMENT 'Create user',
  `ENABLE_FLAG` BIT NOT NULL COMMENT 'Enable flag',
  `LAST_UPDATE_DTTM` DATETIME NOT NULL COMMENT 'Last update date time',
  `LAST_UPDATE_USER` VARCHAR(255) NOT NULL COMMENT 'Last update user',
  `VERSION` BIGINT COMMENT 'Version',
  `JAR_NAME` VARCHAR(1000) COMMENT 'jar name',
  `JAR_URL` VARCHAR(1000) COMMENT 'jar url',
  `MOUNT_ID` VARCHAR(1000) COMMENT 'jar mount id',
  `STATUS` VARCHAR(255) COMMENT 'StopsHue status'
);

CREATE TABLE IF NOT EXISTS `SYS_OPERATION_LOG` (
    `ID`              INTEGER(11) PRIMARY KEY AUTO_INCREMENT,
    `USERNAME`        VARCHAR(255) NULL DEFAULT NULL COMMENT '用户名',
    `LAST_LOGIN_IP`   VARCHAR(255) NULL DEFAULT NULL COMMENT '管理员地址',
    `TYPE`            INTEGER(11) NULL DEFAULT NULL COMMENT '操作分类',
    `ACTION`          VARCHAR(255) NULL DEFAULT NULL COMMENT '操作动作',
    `STATUS`          TINYINT NULL DEFAULT NULL COMMENT '操作状态',
    `RESULT`          VARCHAR(255) NULL DEFAULT NULL COMMENT '操作结果，或者成功消息，或者失败消息',
    `COMMENT`         VARCHAR(255) NULL DEFAULT NULL COMMENT '补充信息',
    `CRT_DTTM`        DATETIME NULL DEFAULT NULL COMMENT '创建时间',
    `LAST_UPDATE_DTTM` DATETIME NULL DEFAULT NULL COMMENT '更新时间',
    `ENABLE_FLAG`     BIT NULL DEFAULT '0' COMMENT '逻辑删除'
);


-- ----------------------------
-- flow sql end
-- ----------------------------
